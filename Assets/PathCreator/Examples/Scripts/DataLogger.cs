using System.Collections;
using System.Collections.Generic;
using PathCreation;
using UnityEngine;
using PathCreation.Examples;
using System.IO;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

public struct log_info
{
    public Vector3 pointer_position;
    public Quaternion pointer_rotation;
    public Vector3 cone_position;
    public bool started;
    public bool path_finished;
    public bool all_end;
    public float distanceTravelled;
}

public class DataLogger
{
    public FileStream fs = null;
    public Stopwatch stopwatch = null;
    public double current_time = 0.0;
    [DllImport("OHToUnityBridge")] public static extern void getVersionString(StringBuilder dest, int len);  //!< Retreives the OpenHaptics version string.

    //lida//creating text file for logging the pointer/stylus position and rotation and cone position
    public DataLogger()
    {
        //string file_name = "./Logs/log_Session" + sinHEffect.FindObjectOfType<sinHEffect>().sessionID + "_Sub" + sinHEffect.FindObjectOfType<sinHEffect>().subID + "_" + System.DateTime.Now.ToString("MM-dd-HH-mm-ss") + ".txt"; //"C:/Experiments_Nov_new/Experimjents-TrainingTest-newnew/Logs/log" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".txt";
        string file_name = "./Logs/log_Sub" + sinHEffect.FindObjectOfType<sinHEffect>().subID + "_" + System.DateTime.Now.ToString("MM-dd-HH-mm-ss") + ".txt"; //"C:/Experiments_Nov_new/Experimjents-TrainingTest-newnew/Logs/log" + DateTime.Now.ToString("yyyyMMddHHmmss") + ".txt";
        fs = new FileStream(file_name, FileMode.Create);
        stopwatch = new Stopwatch();
        stopwatch.Start();
        header();//lida//writing the header of the text file
    }

    //lida//writing the header of the text file
    public void header()
    {
        StringBuilder sb = new StringBuilder(256);
        getVersionString(sb, sb.Capacity);

        string first_line = "% Project data log with Unity & Haptic device\n";
        string sec_line = "% Unity Version :" + UnityEngine.Application.unityVersion + "\n";
        string third_line = "% Windows Version : " + System.Environment.OSVersion.Version.ToString() + "\n";
        string fourth_line = "% Haptic Plugin Version : " + sb.ToString() + "\n";
        string fifth_line = "% Generated By : Datalogger.cs \n";
        string sixth_line = "% " + DateTime.Now.ToString() + "\n";
        string seventh_line = "% \n";
        string eighth_line = "% Format Description : \n";
        string nineth_line = string.Format(
            "% {0,10}   {1,12}   {2,12}   {3,12}   {4,12}   {5,12}   {6,12}   {7,12}   {8,12}   {9,12}   {10,12}   {11,12}   {12,12}   {13,12}   {14,12}\n",
            "CurrTime", "PointerPosX", "PointerPosY", "PointerPosZ", "PointerRotX", "PointerRotY", "PointerRotZ", "PointerRotW",
            "ConePosX", "ConePosY", "ConePosZ", "Started", "PathFinished", "AllEnd", "DistTrav"
        );

        byte[] data = System.Text.Encoding.Default.GetBytes(first_line);
        fs.Write(data, 0, data.Length);

        data = System.Text.Encoding.Default.GetBytes(sec_line);
        fs.Write(data, 0, data.Length);

        data = System.Text.Encoding.Default.GetBytes(third_line);
        fs.Write(data, 0, data.Length);

        data = System.Text.Encoding.Default.GetBytes(fourth_line);
        fs.Write(data, 0, data.Length);

        data = System.Text.Encoding.Default.GetBytes(fifth_line);
        fs.Write(data, 0, data.Length);

        data = System.Text.Encoding.Default.GetBytes(sixth_line);
        fs.Write(data, 0, data.Length);

        data = System.Text.Encoding.Default.GetBytes(seventh_line);
        fs.Write(data, 0, data.Length);

        data = System.Text.Encoding.Default.GetBytes(eighth_line);
        fs.Write(data, 0, data.Length);

        data = System.Text.Encoding.Default.GetBytes(nineth_line);
        fs.Write(data, 0, data.Length);


        fs.Flush();
    }
    //lida//logging the pointer/stylus position and rotation and cone position
    public void log_epoch(log_info info)
    {
        if (stopwatch != null && fs != null)
        {
            stopwatch.Stop();
            double millis = stopwatch.Elapsed.Milliseconds / 1000.0;
            current_time += millis;
            stopwatch.Restart();

            string line = string.Format(
                "{0,12}   {1,12}   {2,12}   {3,12}   {4,12}   {5,12}   {6,12}   {7,12}   {8,12}   {9,12}   {10,12}   {11,12}   {12,12}   {13,12}   {14,12}\n",
                current_time.ToString("0.000000"), 
                info.pointer_position.x.ToString("0.000000"), 
                info.pointer_position.y.ToString("0.000000"), 
                info.pointer_position.z.ToString("0.000000"),
                info.pointer_rotation.x.ToString("0.000000"), 
                info.pointer_rotation.y.ToString("0.000000"), 
                info.pointer_rotation.z.ToString("0.000000"), 
                info.pointer_rotation.w.ToString("0.000000"),
                info.cone_position.x.ToString("0.000000"), 
                info.cone_position.y.ToString("0.000000"), 
                info.cone_position.z.ToString("0.000000"),
                info.started ? 1 : 0, 
                info.path_finished ? 1 : 0, 
                info.all_end ? 1 : 0, 
                info.distanceTravelled.ToString("0.000000")
            );
            byte[] data = System.Text.Encoding.Default.GetBytes(line);
            fs.Write(data, 0, data.Length);
            fs.Flush();
        }
    }
}
